// Generated by CoffeeScript 1.9.3
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

window.GameModelView = (function(superClass) {
  extend(GameModelView, superClass);

  function GameModelView() {
    return GameModelView.__super__.constructor.apply(this, arguments);
  }

  GameModelView.prototype.template = _.template('<div class="gamearea"> <button class="hit-button">Hit</button> <button class="stand-button">Stand</button> <div class="player-hand-container"></div> <div class="dealer-hand-container"></div> </div>');

  GameModelView.prototype.events = {
    'click .hit-button': function() {
      return this.model.get('playerHand').hit();
    },
    'click .stand-button': function() {
      this.model.get('playerHand').stand();
      return this.trigger("stand");
    },
    'click .retry-button': function() {
      return this.render();
    }
  };

  GameModelView.prototype.initialize = function() {
    this.model.on('restart', this.render, this);
    this.model.on('win', this.renderWin, this);
    this.model.on('lose', this.renderLose, this);
    return this.render();
  };

  GameModelView.prototype.render = function() {
    this.$el.children().detach();
    this.$el.html(this.template());
    this.$('.player-hand-container').html(new HandView({
      collection: this.model.get('playerHand')
    }).el);
    return this.$('.dealer-hand-container').html(new HandView({
      collection: this.model.get('dealerHand')
    }).el);
  };

  return GameModelView;

})(Backbone.View);
